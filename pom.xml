<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
<!-- Make sure modelVersion is 4.0.0  -->
<modelVersion>4.0.0</modelVersion>
<!--  groupId is used to identify the organization  -->
<groupId>edu.brown.cs</groupId>
<!--  artifactId is used to name the specific project  -->
<artifactId>stonefall</artifactId>
<!--  type of file you want to output  -->
<packaging>jar</packaging>
<!--  Version of your project  -->
<version>1.0</version>
<!--  Defines UTF-8 encoding  -->
<properties>
<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
</properties>
<!--
 Dependencies section for libraries put all of your libraries in here
-->


<dependencies>
<!--

        jopt-simple is a command line parser.
        https://pholser.github.io/jopt-simple/.

-->
<dependency>
<groupId>net.sf.jopt-simple</groupId>
<artifactId>jopt-simple</artifactId>
<version>4.9</version>
</dependency>
<!--

        junit is a testing framework.
        http://junit.org/junit4/.

-->
<dependency>
<groupId>junit</groupId>
<artifactId>junit</artifactId>
<version>4.12</version>
</dependency>
<!--

        Hamcrest is used for creating assertion tests in junit.
        https://github.com/hamcrest/JavaHamcrest.

-->
<dependency>
<groupId>org.hamcrest</groupId>
<artifactId>hamcrest-all</artifactId>
<version>1.3</version>
</dependency>


<!-- jackson core shit  -->
<dependency>
  <groupId>com.fasterxml.jackson.core</groupId>
  <artifactId>jackson-core</artifactId>
  <version>2.9.2</version>
</dependency>

<dependency>
  <groupId>com.fasterxml.jackson.core</groupId>
  <artifactId>jackson-annotations</artifactId>
  <version>2.9.2</version>
</dependency>

<dependency>
  <groupId>com.fasterxml.jackson.core</groupId>
  <artifactId>jackson-databind</artifactId>
  <version>2.9.2</version>
</dependency>
<!-- end of jackson core shit -->

<!--

        Simple Logging Facade for Java is a logging tool for debugging.
        https://www.slf4j.org/.

-->
<dependency>
<groupId>org.slf4j</groupId>
<artifactId>slf4j-api</artifactId>
<version>1.7.22</version>
</dependency>
<dependency>
<groupId>org.slf4j</groupId>
<artifactId>slf4j-jdk14</artifactId>
<version>1.7.22</version>
</dependency>
<!--

        Google Guava is a useful collections library.
        https://github.com/google/guava.

-->
<dependency>
<groupId>com.google.guava</groupId>
<artifactId>guava</artifactId>
<version>23.4-jre</version>
</dependency>
<!--

        Google GSON is a library for serialization/deserialization of JSON.
        https://github.com/google/gson.

-->
<dependency>
<groupId>com.google.code.gson</groupId>
<artifactId>gson</artifactId>
<version>2.8.2</version>
</dependency>
<!--

        Spark is a web framework for java.
        http://sparkjava.com/.

-->
<dependency>
<groupId>com.sparkjava</groupId>
<artifactId>spark-core</artifactId>
<version>2.6.0</version>
</dependency>
 
 
<!--

        Dependency for freemarker templating language.
        http://freemarker.org/.

-->
<dependency>
<groupId>com.sparkjava</groupId>
<artifactId>spark-template-freemarker</artifactId>
<version>2.5.5</version>
</dependency>
<!--

        SQLite dependency for databases.
        https://bitbucket.org/xerial/sqlite-jdbc.

-->
<dependency>
<groupId>org.xerial</groupId>
<artifactId>sqlite-jdbc</artifactId>
<version>3.20.1</version>
</dependency>
</dependencies>
<!--  Build section  -->
<build>
<plugins>
<!--  Maven compiler plugin for compiling Java 8  -->
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-compiler-plugin</artifactId>
<version>3.2</version>
<configuration>
<source>1.8</source>
<target>1.8</target>
<compilerArgument>-Xlint:all</compilerArgument>
<showWarnings>true</showWarnings>
<showDeprecation>true</showDeprecation>
</configuration>
</plugin>
<plugin>
<groupId>org.jacoco</groupId>
<artifactId>jacoco-maven-plugin</artifactId>
<version>0.7.9</version>
<executions>
<execution>
<id>jacoco-initialize</id>
<phase>initialize</phase>
<goals>
<goal>prepare-agent</goal>
</goals>
</execution>
<execution>
<id>jacoco-site</id>
<phase>verify</phase>
<goals>
<goal>report</goal>
</goals>
</execution>
</executions>
</plugin>
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-surefire-plugin</artifactId>
<version>2.20.1</version>
<configuration>
<argLine>${argLine}</argLine>
</configuration>
</plugin>
</plugins>
</build>
<!--  Reporting Section  -->
<reporting>
<plugins>
<!--

          Plugin used to report on project dependencies.
          https://maven.apache.org/plugins/maven-project-info-reports-plugin/.

-->
<plugin>
<artifactId>maven-project-info-reports-plugin</artifactId>
<version>2.7</version>
<configuration>
<!--  Until it uses BCEL 6.0, details breaks on Java 8  -->
<dependencyDetailsEnabled>false</dependencyDetailsEnabled>
<!--  jetty related locations can't be found, just skip.  -->
<dependencyLocationsEnabled>false</dependencyLocationsEnabled>
</configuration>
</plugin>
<!--

          Maven JXR plugin used with PMD plugin for referencing code errors.
          https://maven.apache.org/jxr/maven-jxr-plugin/.

-->
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-jxr-plugin</artifactId>
<version>2.5</version>
</plugin>
 
<plugin>
<groupId>com.heroku.sdk</groupId>
<artifactId>heroku-maven-plugin</artifactId>
<version>2.0.6</version>
</plugin>
<!--

          Javadoc plugin for generating javadoc site.
          https://maven.apache.org/plugins/maven-javadoc-plugin/.

-->
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-javadoc-plugin</artifactId>
<version>2.10.3</version>
<reportSets>
<reportSet>
<reports>
<report>javadoc</report>
</reports>
</reportSet>
</reportSets>
</plugin>
<!--
 Uses cs32_checks.xml in config directory to check project style
-->
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-checkstyle-plugin</artifactId>
<version>2.17</version>
<configuration>
<configLocation>config/cs32_checks.xml</configLocation>
</configuration>
</plugin>
<!--

          PMD looks for bad coding practices such as unused variables.
          https://maven.apache.org/plugins/maven-pmd-plugin/.

-->
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-pmd-plugin</artifactId>
<version>3.6</version>
</plugin>
<!--

          findbugs plugin to highlight possible code errors.
          http://gleclaire.github.io/findbugs-maven-plugin/.

-->
<plugin>
<groupId>org.codehaus.mojo</groupId>
<artifactId>findbugs-maven-plugin</artifactId>
<version>3.0.3</version>
<configuration>
<!--

              Enable analysis which takes more memory but finds more bugs.
              If you run out of memory, change the value to 'Low'.

-->
<effort>Max</effort>
<!--  Report all bugs (other values are medium and max)  -->
<threshold>Low</threshold>
</configuration>
</plugin>
<!--

          jacoco creates a "coverage" report, so you can see what
          lines of codes and bracnhes your tests exercise.

-->
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-surefire-report-plugin</artifactId>
<version>2.20.1</version>
</plugin>
<plugin>
<groupId>org.jacoco</groupId>
<artifactId>jacoco-maven-plugin</artifactId>
<reportSets>
<reportSet>
<reports>
<!--  select non-aggregate reports  -->
<report>report</report>
</reports>
</reportSet>
</reportSets>
</plugin>
</plugins>
</reporting>
</project>
